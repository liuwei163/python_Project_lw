# # # 猜数字游戏
"""
import random               # 拉取标准库中的模块用来产生随机数
n = random.randint(1, 100)  # randint: 产生随机整数

while 1:

    r = input("请猜测随机数是多少：")
    if not r.isdigit():  # 判断输入是否为数字，如果输入不是数字则打印以下内容
        print("请输入0-100的数字")
        continue  # 停止当前本次循环，开启下一次循环
    r = int(r)
    if r > n:
        print("猜大了")
    elif r < n:
        print("猜小了")
    else:
        print("猜对了")
        break     # 打断当前一层的while循环，（猜对以后，退出循环）
"""
# 1) + 字符串类型,不可用来"运算",但是可以用来"拼接" 如: a + b =ab
# 只能字符串和字符串拼接，不能字符串和整数拼接
s1 = '张' + '3'     # 将整数3 转换成 字符串才可以拼接
s2 = '3' + '张'
s3 = '张' + str(3)
print(s1, s2, s3)

# * 字符串的复制(只能字符串乘以数字，不能字符串乘以字符串)
s = "刘伟"
s1 = s*3
print(s)   # 输出一个刘伟
print(s1)  # 输出3个刘伟

# in  判断s字符串是否在str中
s = "白色，黑色，蓝色，红色，绿色，青色"
s1 = "白色"
s2 = "紫色"
print(s1 in s)
print(s2 in s)

# 大小写转换
s = "Python"
s3 = s.upper()
print(s3)  # 输出：PYTHON
print(s)   # 输出：Python

# 格式化
s4 = f"Learn {s}"
print(s4)  # 输出：Learn Python


"""
字符串在python中是一个不可变的数据类型
在Python中，字符串的不可变性意味着你永远不能"原地"修改字符串，所有修改操作都会返回新的字符串对象。
# 创建一个字符串
text = "Hello"

# 尝试修改字符串
try:
    text[0] = "h"  # 尝试将第一个字符改为小写
except TypeError as e:
    print(f"错误：{e}")  # 这会抛出 TypeError

# 正确的"修改"方式
text = "Hello"
new_text = text.replace("H", "h")  # 创建了一个新字符串
print(f"原字符串：{text}")      # 输出：Hello
print(f"新字符串：{new_text}")  # 输出：hello
print(f"内存地址是否相同：{id(text) == id(new_text)}")  # 输出：False
"""

################################################format_start#####################################################
# 2)format方法的基本使用
# 字符串使用方式:<模板字符串>.format(<逗号分隔的参数>)
# 其中模板字符串是一个由 字符串 和 槽 组成的字符串，用来控制字符串和变量的显示效果
n = input("请输入鸡腿个数：")
m = input("请输入鸡蛋个数：")
a = "今天中午我吃了{}个鸡腿，{}个鸡蛋".format(n, m)    # {} 大括号就是代表"槽" 默认序号是0~1
b = "今天中午我吃了{1}个鸡腿，{0}个鸡蛋".format(n, m)    # 默认按照顺序传，但是也可以使用序号 让他传到指定位置
print(a)
print(b)
print(type(a))

# format方法格式控制
# format()的槽不仅包括参数序号还包括格式控制信息，语法格式为!
# {参数序号>:<格式控制标记>}

# n = input("请输入鸡腿个数：")
# m = input("请输入鸡蛋个数：")
# 设置宽度,（冒号后面的数字为要给槽设置的宽度）
# 槽的宽度是包含 参数序号 的值的。
# 宽度必须在填充的后面
# a = "今天中午我吃了{:10}个鸡腿，{:20}个鸡蛋".format(n, m)    # {} 大括号就是代表"槽" 默认序号是0~1
# b = "今天中午我吃了{1:10}个鸡腿，{0:20}个鸡蛋".format(n, m)    # 默认按照顺序传，但是也可以使用序号 让他传到指定位置
# print(a)
# print(b)

# 设置填充和对齐
# < 表示左对齐，> 表示右对齐， ^ 表示居中对齐
# * 号位置是你要填充的内容
# a = "今天中午我吃了{:*<10}个鸡腿，{:*>20}个鸡蛋".format(n, m)    # {} 大括号就是代表"槽" 默认序号是0~1
# b = "今天中午我吃了{1:#^10}个鸡腿，{0:#^20}个鸡蛋".format(n, m)
# print(a)
# print(b)

# 设置千位分割符(适用与整数和浮点数)
# , 表示设置千位分隔符
# 如果设置了千位分隔符，那参数必须是"整数"或是"浮点数"
# a = "今天中午我吃了{:*<10,}个鸡腿，{:*>20,}个鸡蛋".format(n, m)    # {} 大括号就是代表"槽" 默认序号是0~1
# b = "今天中午我吃了{1:#^10,}个鸡腿，{0:#^20,}个鸡蛋".format(n, m)
# print(a)
# print(b)

# 设置精度(浮点数小数部分的精度或字符串的最大输出长度)
# .数字f 表示保留小数点后几位(参数是浮点数的时候使用)
# .数字  表示设置字符串的最大输出长度(参数是字符串的时候使用)
# a = "今天中午我吃了{:.1f}个鸡腿，{:.3f}个鸡蛋".format(3.1452666, 2.1000444)    # .数字f 参数为浮点数
# b = "今天中午我吃了{1:.2f}个鸡腿，{0:.1f}个鸡蛋".format(3.6555111, 2.0111555)
# print(a)
# print(b)
# c = "今天中午我吃了{1:.2}个鸡腿，{0:.1}个鸡蛋".format("3.6555111", "2.0111555")    # .数字 参数为字符串。表示设置字符串的最大输出长度
# print(c)

# 类型(整数)
"""
b 输出整数的二进制方式，
d 输出整数的十进制方式，
o 输出整数的八进制方式,
x 输出整数的十六进制方式，
X 输出整数的大写十六进制方式

c 输出整数对应的unicode字符

"""

# s = "数字100的二进制输出是：{:b}".format(100)    # 将数字100进行二进制输出
# print(s)

# s = "c 表示输出整数对应的unicode字符：{:c}".format(97)    # 97 = a
# print(s)

# s = "十六进制小写：{:x}".format(973)    # 输出的字母是小写
# s1 = "十六进制大写：{:X}".format(973)    # 输出的字母是大写
# print(s)
# print(s1)

# 类型(浮点数)
"""
e:输出浮点数对应的小写字母e的指数形式(e 用于科学计数法，表示“乘以 10 的 n 次方”。)
E:输出浮点数对应的大写字母E的指数形式
f:输出浮点数的标准浮点型形式（标准形式就是输出六位小数）
% :输出浮点数的百分比形式
"""
# s = "e:输出浮点数对应的小写字母e的指数形式：{:e}".format(31456.98822)
# print(s)

# f 标准形式就是输出六位小数
# s1 = "输出浮点数的标准浮点型形式：{:f}".format(31456.98)
# print(s1)

# % 乘以100%
s1 = "输出浮点数的百分比形式：{:%}".format(3.141)
print(s1)
#########################################format_END###############################################

# s = '{0:^10}{1:>5}'.format('x', 'y')
# print(s)
# print('acd'.isalpha())


