# print(b // a)  整除
# print(b % a)   获取余数0

a = 13
b = 14
print(a+b)
print(a-b)
print(a/b)    # 求两数之商，结果为浮点数
print(a//b)   # 求两数的整数商
print(a % b)  # 算余数的时候使用%,但是如果a比b小那么结果一定是为a的
print(a**b)   # a的b次幂
"""
一、 运算符
整数和浮点数混合运算，输出结果浮点数;
整数之间运算，产生结果类型与操作符相关;
整数或浮点数与复数运算，输出结果是复数。
    1.算数运算
        +   -   *   /   //   %  **      -x           +x
                                    一个数的负数     一个数本身
    2.比较运算
        < > >= <= == !=
        is     # 判断是否是同一个对象,(一般用来判断是否为空None)
        not is # 
二、 增强操作运算符
先进行运算再赋值给x
操作符        描述
x += y       等价于:x= x + y
x -= y       等价于:x= x - y
x *= y       等价于:x= x * y
x /= y       等价于:x= x / y
x //= y      等价于:x= x // y
x %= y       等价于:x= x % y
x **= y      等价于:x= x ** y

三、 数值运算函数
![](../图片/02_运算符_数值运算函数.png)
1)abs(x)
# 用于计算整数或浮点数x的绝对值(非负数，负数会变为正数)，结果为非负值。该函数也可以计算复数的绝对值。
print(abs(-22))
结果为：
22

print(abs(3+4j))
# 根下的 a的平方+b的平方
结果为:
5.0

2)divmod(x,y)
# 用于计算x和y的除余结果，返回两个值，分别是x和y的整数除，即x//y，以及x与y的余数，即x%y。
例如:
print(divmod(10, 3))
结果为：
(3, 1)

3)pow(x,y) 或 pow(x,y,z)
# 用于计算x的y次幂
# pow(x,y,z)则用来计算“x的y次方%z”，模运算与幂运算同时进行，速度更快。
例如:
print(pow(10, 2))
结果为：
100

print(pow(10, 2, 3))
结果为：
1

例1： 两个计算的结果相同但是使用pow函数速度更快
print(pow(123456789, 1234567, 1212))
# print(123456789 ** 1234567 % 1212)

4)round(x) 或 round(x,d) 
# 对x四舍五入，保留d位小数，无参则返回x的整数
# 对整数或浮点数x进行四舍五入运算。采用“奇进偶不进”的方式运算。
# 保留d位小数
    print(round(1.6543, 3))    
    print(round(0.1 + 0.2, 1)) 

5)max(x1,x2,x3,....,xn)
# 对任意多个数字进行最大值比较，并输出最大值
print(max(1,3,5,3,5,2,6,9))

6)min(x1,x2,x3,....,xn)
# 对任意多个数字进行最小值比较，并输出最小值
print(min(1,3,5,3,5,2,6,9))
"""
# 判空操作
a = None
print(a == None)  # 不建议这样使用
print(a is None)  # 判断变量a是空     (返回True)
print(a is not None)  # 判断变量a不是空 (返回false)

# 赋值运算:
# a = b
# a = a + 1  "和"  a += 1  是一样的效果
# a += b   "和"  a = a + b 是一样的

""" and和or 的逻辑
如果遇到不同的运算符组合.需要注意,计算优先级顺序如下：
() => not => and => or
# print(1 > 2 and 2 > 4 or 3 < 6 or 4 < 7 and 5 > 8)   # 结果 T
# print(not 2 > 1 and 3 < 4 or 4 > 5 and 2 > 1 and 9 > 8 or 7 < 6) # 结果 F
        # 0可以表示假
        print(0 and 2)  # 结果为0
        # 非0 可以表示真.
        print(32 and 4) # 结果为4
        # and 的逻辑是:前面这个数字如果有结果了,就得到前面的数字,如果得不到,结果就是后面的数字
        # or 的逻辑和and是相反的
        print(10 or 20) # 结果为10
"""
