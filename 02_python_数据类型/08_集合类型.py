# 集合类型：只能存放一些简单的数据类型，字符，数字
# 集合是无序组合，用大括号{}表示，可包含0个或多个数据项。
# 定义空集合必须使用 set()函数
"""
    s = {1, 3, 5, 7}
    s1 = {}
    s2 = set()
    print(type(s))    # <class 'set'>
    print(type(s1))   # <class 'dict'>  直接使用   变量 = {}  的数据类型是字典类型，不是集合类型
    print(type(s2))   # <class 'set'>  定义空集合必须使用 set()函数
"""

# 集合中元素不可重复，元素类型只能是固定数据类型
"""
s = {1, 3, 5, 7, 3, 1, '刘伟'}
print(s)   # 输出为：{1, 3, 5, 7}，重复的元素会被去掉(去重)
"""

# 它没有索引和位置的概念，集合中元素可以动态增加或删除。
s = {1, 3, "a", 5, 7, 3, 1, '刘伟', "z"}
print(s)   # 输出为：{'a', 1, 3, 'z', 5, 7, '刘伟'}, 无序的，没有索引和位置的概念

# 集合类型有4个操作符，交集(&)、并集(|)、差集(-)、补集(^)，操作逻辑与数学定义相同。
s1 = {1, 3, 5, 7, 9}
s2 = {1, 5, 6, 8, 0}
print(s1 & s2)  # {1, 5}                    # 一样的输出出来
print(s1 | s2)  # {0, 1, 3, 5, 6, 7, 8, 9}  # 合并输出，重复的只输出一次
print(s1 - s2)  # {9, 3, 7}                 # 输出s1中有，s2中没有的元素
print(s1 ^ s2)  # {0, 3, 6, 7, 8, 9}        # s1和s2中相同的元素去掉，不一样的元素输出出来

# 二、集合类型有一些常用的操作函数或方法
"""
函数或方法                               描述
    s.add(x)                           如果数据项x不在集合s中，将x增加到s
    s.remove(x)                        如果x在集合s中，移除该元素。不在产生 KeyError异常
    s.clear()                          移除s集合中所有数据项
    len(s)                             返回集合s元素个数
    x in s                             如果x是s的元素，返回True，否则返回False
    x not in s                         如果x不是s的元素，返回True，否则返回False
"""
# s.add(x),添加11到集合中
s1 = {1, 3, 5, 7, 9}
s1.add(11)
print(s1)   # {1, 3, 5, 7, 9, 11}

# s.remove(x) # 将1 从集合中删除,  (x)如果不存在，则产生 KeyError异常
s1 = {1, 3, 5, 7, 9}
s1.remove(1)
print(s1)  # {3, 5, 7, 9}

# s.clear(),清空当前的集合s中的所有元素
s1 = {1, 3, 5, 7, 9}
s1.clear()
print(s1)  # set()

# len(s)，返回集合中的元素个数
s1 = {1, 3, 5, 7, 9}
print(len(s1))

# x in s  和 x not in s
s1 = {1, 3, 5, 7, 9}
print(3 in s1)       # 结果为真，则返回True，反之则返回False
print(33 not in s1)

